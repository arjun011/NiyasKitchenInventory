name: CI

on:
  push:
    branches: [ main, feature, develop ]
  pull_request:
    branches: [ main, feature, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-only:
    runs-on: macos-15

    env:
      PROJECT: "NiyasKitchenInventory.xcodeproj"
      SCHEME: "NiyasKitchenInventory"
      CONFIGURATION: "Debug"
      DESTINATION: "generic/platform=iOS Simulator"
      DEVELOPER_DIR: "/Applications/Xcode_16.1.app"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.1 & show versions
        run: |
          sudo xcode-select -s "$DEVELOPER_DIR"
          xcodebuild -version
          xcrun simctl list runtimes | grep iOS || true

      - name: Cache Swift Packages
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
            ~/Library/Caches/org.swift.swiftpm
          key: spm-${{ runner.os }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            spm-${{ runner.os }}-

      - name: Resolve SPM dependencies
        run: xcodebuild -resolvePackageDependencies -project "$PROJECT"

      - name: Build (no tests) â€” capture full log and xcresult
        id: build
        run: |
          set -euo pipefail
          rm -rf build || true
          mkdir -p build

          # Run build and capture raw output + exit code
          set +e
          xcodebuild \
            -project "$PROJECT" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk iphonesimulator \
            -destination "$DESTINATION" \
            CODE_SIGNING_ALLOWED=NO \
            -resultBundlePath build/CI.xcresult \
            clean build | tee build/xcodebuild.log
          XCB_EXIT=${PIPESTATUS[0]}
          set -e

          echo "XCODEBUILD_EXIT=${XCB_EXIT}" >> "$GITHUB_OUTPUT"
          echo "---- Tail of xcodebuild.log ----"
          tail -n 300 build/xcodebuild.log || true
          echo "--------------------------------"

      - name: Upload xcodebuild.log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild.log
          path: build/xcodebuild.log
          if-no-files-found: warn

      - name: Upload BuildResult.xcresult (if produced)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: BuildResult.xcresult
          path: build/CI.xcresult
          if-no-files-found: warn

      - name: Fail job if build failed
        if: steps.build.outputs.XCODEBUILD_EXIT != '0'
        run: |
          echo "Build failed. Download artifacts: xcodebuild.log and BuildResult.xcresult, then open the xcresult in Xcode."
          exit 1

